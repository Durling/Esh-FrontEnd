{
  "name": "object-stream",
  "version": "0.0.1",
  "author": {
    "name": "Nicolas Mercier"
  },
  "description": "Simplified streams of objects",
  "keywords": [
    "stream",
    "streams2"
  ],
  "engines": {
    "node": ">=0.10"
  },
  "scripts": {
    "test": "mocha test/**/test-*.js -R spec"
  },
  "devDependencies": {
    "mocha": "^1.18.2",
    "should": "^3.3.1"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/extrabacon/object-stream"
  },
  "homepage": "http://github.com/extrabacon/object-stream",
  "bugs": {
    "url": "http://github.com/extrabacon/object-stream/issues"
  },
  "readme": "# object-stream\n\nSimplified object streams based on Node streams2.\n\n## Installation\n\n```bash\nnpm install object-stream\n```\n\n## Examples\n\n#### Creating a readable stream of objects from an array\n\n```js\nvar objectStream = require('object-stream');\nobjectStream.fromArray([1, 2, 3]).pipe(...);\n```\n\nPass an empty array or anything falsy to create an empty stream.\n\n#### Collecting elements into an array\n\n```js\nvar objectStream = require('object-stream');\nobjectStream.fromArray([1, 2, 3])\n  .pipe(objectStream.toArray(function (err, array) {\n    /* array contains all items emitted from readable streams */\n  }));\n```\n\n#### Mapping objects through a transform stream\n\nSynchronously (iterator has only one argument):\n\n```js\nvar objectStream = require('object-stream');\n\nobjectStream.fromArray([1, 2, 3])\n  .pipe(objectStream.map(function (value) {\n    return value * 2;\n  }))\n  .pipe(...);\n\n// asynchronous\nobjectStream.fromArray([1, 2, 3])\n  .pipe(objectStream.map(function (value, callback) {\n    setTimeout(function () {\n      callback(null, value * 2);\n    }, 100);\n  }))\n  .pipe(...);\n```\n\nAsynchronously (iterator has two arguments: value and callback):\n\n```js\nvar objectStream = require('object-stream');\n\nobjectStream.fromArray([1, 2, 3])\n  .pipe(objectStream.map(function (value, callback) {\n    setTimeout(function () {\n      callback(null, value * 2);\n    }, 100);\n  }))\n  .pipe(...);\n```\n\n#### Saving objects through a writable stream (or any other write-like action)\n\nSynchronously (iterator has only one argument):\n\n```js\nvar objectStream = require('object-stream');\n\nfunction save(value) {\n  /* save item... */\n};\n\nobjectStream.fromArray([1, 2, 3]).pipe(objectStream.save(save));\n```\n\nAsynchronously (iterator has two arguments: value and callback):\n\n```js\nvar objectStream = require('object-stream');\n\nfunction saveAsync(value, callback) {\n  /* save item... */\n  callback();\n};\n\nobjectStream.fromArray([1, 2, 3]).pipe(objectStream.save(saveAsync));\n```\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014, Nicolas Mercier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "object-stream@0.0.1",
  "_shasum": "3a03a26e94fd112c9abffeb4651e07a5e23cf840",
  "_from": "object-stream@^0.0.1",
  "_resolved": "https://registry.npmjs.org/object-stream/-/object-stream-0.0.1.tgz"
}
